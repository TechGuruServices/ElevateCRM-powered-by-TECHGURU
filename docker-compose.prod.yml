# Production Docker Compose configuration for ElevateCRM
# This configuration is optimized for production deployment

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: elevatecrm_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: elevatecrm
      POSTGRES_USER: elevatecrm_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    networks:
      - elevatecrm_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U elevatecrm_user -d elevatecrm"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # CACHE AND MESSAGE BROKER
  # =============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: elevatecrm_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_this_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - elevatecrm_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # =============================================================================
  # BACKEND API SERVICE
  # =============================================================================
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=production
    container_name: elevatecrm_backend
    restart: unless-stopped
    command: sh -c "alembic upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 4"
    environment:
      - DATABASE_URL=postgresql://elevatecrm_user:${POSTGRES_PASSWORD:-change_this_password}@postgres:5432/elevatecrm
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this}
      - ENVIRONMENT=production
      - DEBUG=false
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-https://yourdomain.com}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME:-}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY:-}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
    ports:
      - "8000:8000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - elevatecrm_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # BACKGROUND WORKER SERVICE
  # =============================================================================
  
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    container_name: elevatecrm_worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://elevatecrm_user:${POSTGRES_PASSWORD:-change_this_password}@postgres:5432/elevatecrm
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-your-super-secret-key-change-this}
      - ENVIRONMENT=production
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME:-}
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD=${SMTP_PASSWORD:-}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - elevatecrm_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-https://api.yourdomain.com}
        - NEXT_PUBLIC_APP_NAME=ElevateCRM
        - NEXT_PUBLIC_COMPANY_NAME=TECHGURU
    container_name: elevatecrm_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    networks:
      - elevatecrm_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # =============================================================================
  # REVERSE PROXY (NGINX)
  # =============================================================================
  
  nginx:
    image: nginx:alpine
    container_name: elevatecrm_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - elevatecrm_network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: elevatecrm_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - elevatecrm_network

  grafana:
    image: grafana/grafana:latest
    container_name: elevatecrm_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - elevatecrm_network
    depends_on:
      - prometheus

  # =============================================================================
  # BACKUP SERVICE
  # =============================================================================
  
  backup:
    image: postgres:16-alpine
    container_name: elevatecrm_backup
    restart: "no"
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-change_this_password}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["/backup.sh"]
    networks:
      - elevatecrm_network
    depends_on:
      - postgres
    profiles:
      - backup

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  elevatecrm_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local